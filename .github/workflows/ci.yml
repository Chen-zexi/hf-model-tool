name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

jobs:
  test:
    name: Test Python ${{ matrix.python-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
        exclude:
          # Reduce matrix size for faster CI
          - os: windows-latest
            python-version: "3.8"
          - os: windows-latest  
            python-version: "3.9"
          - os: macos-latest
            python-version: "3.8"
          - os: macos-latest
            python-version: "3.9"
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[test]"
        
    - name: Run tests
      run: |
        pytest --cov=hf_model_tool --cov-report=xml --cov-report=term-missing
        
    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    continue-on-error: true  # Allow this job to fail without failing the entire workflow
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        
    - name: Run black formatter (auto-fix)
      run: |
        black hf_model_tool/ tests/
        
    - name: Check for formatting changes
      continue-on-error: true  # Don't fail if there are formatting changes
      run: |
        git diff --exit-code || echo "Code was reformatted"
        
    - name: Run flake8 linter
      continue-on-error: true  # Allow linting errors
      run: |
        flake8 hf_model_tool/ tests/ || echo "Linting issues found"
        
    - name: Run mypy type checker
      continue-on-error: true  # Allow type checking errors
      run: |
        mypy hf_model_tool/ || echo "Type checking issues found"

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    continue-on-error: true  # Allow security scan to fail without failing the entire workflow
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install "bandit[toml]"
        
    - name: Run Bandit Security Scan
      continue-on-error: true  # Don't fail on security issues
      run: |
        bandit -r hf_model_tool/ -f json -o bandit-report.json || echo "Security scan completed with warnings"
        bandit -r hf_model_tool/ -c .bandit || echo "Security scan completed"
        
    - name: Upload Bandit Report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: bandit-report
        path: bandit-report.json

  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: [test]  # Only require tests to pass, not lint or security
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
        
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
        
    - name: Build package
      run: |
        python -m build
        
    - name: Check package
      run: |
        twine check dist/*
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/

  publish:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [test, build]  # Only require tests and build, not lint or security
    if: github.event_name == 'release' && github.event.action == 'published'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/
        
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.PYPI_API_TOKEN }}